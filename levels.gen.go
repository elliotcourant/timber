// Code generated by gen/gen.go - DO NOT EDIT.
package timber

import (
	"fmt"
)

type Keys map[string]interface{}

type Level string

const (
	Trace    Level = "trace"
	Verbose        = "verbose"
	Debug          = "debug"
	Info           = "info"
	Warning        = "warning"
	Error          = "error"
	Critical       = "critical"
	Fatal          = "fatal"
)

type Logger interface {

	// Trace writes the provided string to the log.
	Trace(msg string)

	// Tracef writes a formatted string using the arguments provided to the log.
	Tracef(msg string, args ...interface{})

	// TraceEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	TraceEx(keys Keys, msg string, args ...interface{})

	// Verbose writes the provided string to the log.
	Verbose(msg string)

	// Verbosef writes a formatted string using the arguments provided to the log.
	Verbosef(msg string, args ...interface{})

	// VerboseEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	VerboseEx(keys Keys, msg string, args ...interface{})

	// Debug writes the provided string to the log.
	Debug(msg string)

	// Debugf writes a formatted string using the arguments provided to the log.
	Debugf(msg string, args ...interface{})

	// DebugEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	DebugEx(keys Keys, msg string, args ...interface{})

	// Info writes the provided string to the log.
	Info(msg string)

	// Infof writes a formatted string using the arguments provided to the log.
	Infof(msg string, args ...interface{})

	// InfoEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	InfoEx(keys Keys, msg string, args ...interface{})

	// Warning writes the provided string to the log.
	Warning(msg string)

	// Warningf writes a formatted string using the arguments provided to the log.
	Warningf(msg string, args ...interface{})

	// WarningEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	WarningEx(keys Keys, msg string, args ...interface{})

	// Error writes the provided string to the log.
	Error(msg string)

	// Errorf writes a formatted string using the arguments provided to the log.
	Errorf(msg string, args ...interface{})

	// ErrorEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	ErrorEx(keys Keys, msg string, args ...interface{})

	// Critical writes the provided string to the log.
	Critical(msg string)

	// Criticalf writes a formatted string using the arguments provided to the log.
	Criticalf(msg string, args ...interface{})

	// CriticalEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	CriticalEx(keys Keys, msg string, args ...interface{})

	// Fatal writes the provided string to the log.
	Fatal(msg string)

	// Fatalf writes a formatted string using the arguments provided to the log.
	Fatalf(msg string, args ...interface{})

	// FatalEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	FatalEx(keys Keys, msg string, args ...interface{})

	// Log will write a raw entry to the log, it accepts an array of interfaces which will
	// be converted to strings if they are not already.
	Log(lvl Level, v ...interface{})

	// With will create a new Logger interface that will prefix all log entries written
	// from the new interface with the keys specified here. It will also include any
	// keys that are specified in the current Logger instance.
	// This means that you can chain multiple of these together to add/remove keys that
	// are written with every message.
	With(keys Keys) Logger
}

// Trace writes the provided string to the log.
func (l *logger) Trace(msg string) {
	l.log(l.stackDepth, Trace, nil, msg)
}

// Tracef writes a formatted string using the arguments provided to the log.
func (l *logger) Tracef(msg string, args ...interface{}) {
	l.log(l.stackDepth, Trace, nil, fmt.Sprintf(msg, args...))
}

// TraceEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) TraceEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Trace, keys, fmt.Sprintf(msg, args...))
}

// Verbose writes the provided string to the log.
func (l *logger) Verbose(msg string) {
	l.log(l.stackDepth, Verbose, nil, msg)
}

// Verbosef writes a formatted string using the arguments provided to the log.
func (l *logger) Verbosef(msg string, args ...interface{}) {
	l.log(l.stackDepth, Verbose, nil, fmt.Sprintf(msg, args...))
}

// VerboseEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) VerboseEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Verbose, keys, fmt.Sprintf(msg, args...))
}

// Debug writes the provided string to the log.
func (l *logger) Debug(msg string) {
	l.log(l.stackDepth, Debug, nil, msg)
}

// Debugf writes a formatted string using the arguments provided to the log.
func (l *logger) Debugf(msg string, args ...interface{}) {
	l.log(l.stackDepth, Debug, nil, fmt.Sprintf(msg, args...))
}

// DebugEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) DebugEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Debug, keys, fmt.Sprintf(msg, args...))
}

// Info writes the provided string to the log.
func (l *logger) Info(msg string) {
	l.log(l.stackDepth, Info, nil, msg)
}

// Infof writes a formatted string using the arguments provided to the log.
func (l *logger) Infof(msg string, args ...interface{}) {
	l.log(l.stackDepth, Info, nil, fmt.Sprintf(msg, args...))
}

// InfoEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) InfoEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Info, keys, fmt.Sprintf(msg, args...))
}

// Warning writes the provided string to the log.
func (l *logger) Warning(msg string) {
	l.log(l.stackDepth, Warning, nil, msg)
}

// Warningf writes a formatted string using the arguments provided to the log.
func (l *logger) Warningf(msg string, args ...interface{}) {
	l.log(l.stackDepth, Warning, nil, fmt.Sprintf(msg, args...))
}

// WarningEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) WarningEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Warning, keys, fmt.Sprintf(msg, args...))
}

// Error writes the provided string to the log.
func (l *logger) Error(msg string) {
	l.log(l.stackDepth, Error, nil, msg)
}

// Errorf writes a formatted string using the arguments provided to the log.
func (l *logger) Errorf(msg string, args ...interface{}) {
	l.log(l.stackDepth, Error, nil, fmt.Sprintf(msg, args...))
}

// ErrorEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) ErrorEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Error, keys, fmt.Sprintf(msg, args...))
}

// Critical writes the provided string to the log.
func (l *logger) Critical(msg string) {
	l.log(l.stackDepth, Critical, nil, msg)
}

// Criticalf writes a formatted string using the arguments provided to the log.
func (l *logger) Criticalf(msg string, args ...interface{}) {
	l.log(l.stackDepth, Critical, nil, fmt.Sprintf(msg, args...))
}

// CriticalEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) CriticalEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Critical, keys, fmt.Sprintf(msg, args...))
}

// Fatal writes the provided string to the log.
func (l *logger) Fatal(msg string) {
	l.log(l.stackDepth, Fatal, nil, msg)
}

// Fatalf writes a formatted string using the arguments provided to the log.
func (l *logger) Fatalf(msg string, args ...interface{}) {
	l.log(l.stackDepth, Fatal, nil, fmt.Sprintf(msg, args...))
}

// FatalEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) FatalEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Fatal, keys, fmt.Sprintf(msg, args...))
}
