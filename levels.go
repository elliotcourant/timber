// Code generated by gen/gen.go - DO NOT EDIT.
// This code can be regenerated by running the go generate below.
//go:generate make generated

package timber

import (
	"fmt"
	"github.com/logrusorgru/aurora"
)

type colorFunc func(arg interface{}) aurora.Value

type Keys map[string]interface{}

type Level int

const (
	Level_Trace    Level = 1
	Level_Verbose        = 2
	Level_Debug          = 3
	Level_Info           = 4
	Level_Warning        = 5
	Level_Error          = 6
	Level_Critical       = 7
	Level_Fatal          = 8
)

var (
	foregroundColors = map[Level]colorFunc{
		Level_Trace:   aurora.BrightBlue,
		Level_Verbose: aurora.BrightCyan,
		Level_Debug:   aurora.White,
		Level_Info:    aurora.Green,
		Level_Warning: aurora.BrightYellow,
		Level_Error:   aurora.Red,
	}

	backgroundColors = map[Level]colorFunc{
		Level_Critical: aurora.BgBrightRed,
		Level_Fatal:    aurora.BgRed,
	}

	levelNames = map[Level]string{
		Level_Trace:    "Trace",
		Level_Verbose:  "Verbose",
		Level_Debug:    "Debug",
		Level_Info:     "Info",
		Level_Warning:  "Warning",
		Level_Error:    "Error",
		Level_Critical: "Critical",
		Level_Fatal:    "Fatal",
	}

	shortLevelNames = map[Level]string{
		Level_Trace:    "TRCE",
		Level_Verbose:  "VERB",
		Level_Debug:    "DBUG",
		Level_Info:     "INFO",
		Level_Warning:  "WARN",
		Level_Error:    "ERRR",
		Level_Critical: "CRIT",
		Level_Fatal:    "FATL",
	}
)

type Logger interface {
	// Trace writes the provided string to the log.
	Trace(msg interface{})

	// Tracef writes a formatted string using the arguments provided to the log.
	Tracef(msg string, args ...interface{})

	// TraceEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	TraceEx(keys Keys, msg string, args ...interface{})

	// Verbose writes the provided string to the log.
	Verbose(msg interface{})

	// Verbosef writes a formatted string using the arguments provided to the log.
	Verbosef(msg string, args ...interface{})

	// VerboseEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	VerboseEx(keys Keys, msg string, args ...interface{})

	// Debug writes the provided string to the log.
	Debug(msg interface{})

	// Debugf writes a formatted string using the arguments provided to the log.
	Debugf(msg string, args ...interface{})

	// DebugEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	DebugEx(keys Keys, msg string, args ...interface{})

	// Info writes the provided string to the log.
	Info(msg interface{})

	// Infof writes a formatted string using the arguments provided to the log.
	Infof(msg string, args ...interface{})

	// InfoEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	InfoEx(keys Keys, msg string, args ...interface{})

	// Warning writes the provided string to the log.
	Warning(msg interface{})

	// Warningf writes a formatted string using the arguments provided to the log.
	Warningf(msg string, args ...interface{})

	// WarningEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	WarningEx(keys Keys, msg string, args ...interface{})

	// Error writes the provided string to the log.
	Error(msg interface{})

	// Errorf writes a formatted string using the arguments provided to the log.
	Errorf(msg string, args ...interface{})

	// ErrorEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	ErrorEx(keys Keys, msg string, args ...interface{})

	// Critical writes the provided string to the log.
	Critical(msg interface{})

	// Criticalf writes a formatted string using the arguments provided to the log.
	Criticalf(msg string, args ...interface{})

	// CriticalEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	CriticalEx(keys Keys, msg string, args ...interface{})

	// Fatal writes the provided string to the log.
	Fatal(msg interface{})

	// Fatalf writes a formatted string using the arguments provided to the log.
	Fatalf(msg string, args ...interface{})

	// FatalEx writes a formatted string using the arguments provided to the log
	// but also will prefix the log message with they keys provided to help print
	// runtime variables.
	FatalEx(keys Keys, msg string, args ...interface{})

	// Log will write a raw entry to the log, it accepts an array of interfaces which will
	// be converted to strings if they are not already.
	Log(lvl Level, v ...interface{})

	// With will create a new Logger interface that will prefix all log entries written
	// from the new interface with the keys specified here. It will also include any
	// keys that are specified in the current Logger instance.
	// This means that you can chain multiple of these together to add/remove keys that
	// are written with every message.
	With(keys Keys) Logger
}

// Trace writes the provided string to the log.
func (l *logger) Trace(msg interface{}) {
	l.log(l.stackDepth, Level_Trace, nil, msg)
}

// Tracef writes a formatted string using the arguments provided to the log.
func (l *logger) Tracef(msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Trace, nil, fmt.Sprintf(msg, args...))
}

// TraceEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) TraceEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Trace, keys, fmt.Sprintf(msg, args...))
}

// Verbose writes the provided string to the log.
func (l *logger) Verbose(msg interface{}) {
	l.log(l.stackDepth, Level_Verbose, nil, msg)
}

// Verbosef writes a formatted string using the arguments provided to the log.
func (l *logger) Verbosef(msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Verbose, nil, fmt.Sprintf(msg, args...))
}

// VerboseEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) VerboseEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Verbose, keys, fmt.Sprintf(msg, args...))
}

// Debug writes the provided string to the log.
func (l *logger) Debug(msg interface{}) {
	l.log(l.stackDepth, Level_Debug, nil, msg)
}

// Debugf writes a formatted string using the arguments provided to the log.
func (l *logger) Debugf(msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Debug, nil, fmt.Sprintf(msg, args...))
}

// DebugEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) DebugEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Debug, keys, fmt.Sprintf(msg, args...))
}

// Info writes the provided string to the log.
func (l *logger) Info(msg interface{}) {
	l.log(l.stackDepth, Level_Info, nil, msg)
}

// Infof writes a formatted string using the arguments provided to the log.
func (l *logger) Infof(msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Info, nil, fmt.Sprintf(msg, args...))
}

// InfoEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) InfoEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Info, keys, fmt.Sprintf(msg, args...))
}

// Warning writes the provided string to the log.
func (l *logger) Warning(msg interface{}) {
	l.log(l.stackDepth, Level_Warning, nil, msg)
}

// Warningf writes a formatted string using the arguments provided to the log.
func (l *logger) Warningf(msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Warning, nil, fmt.Sprintf(msg, args...))
}

// WarningEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) WarningEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Warning, keys, fmt.Sprintf(msg, args...))
}

// Error writes the provided string to the log.
func (l *logger) Error(msg interface{}) {
	l.log(l.stackDepth, Level_Error, nil, msg)
}

// Errorf writes a formatted string using the arguments provided to the log.
func (l *logger) Errorf(msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Error, nil, fmt.Sprintf(msg, args...))
}

// ErrorEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) ErrorEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Error, keys, fmt.Sprintf(msg, args...))
}

// Critical writes the provided string to the log.
func (l *logger) Critical(msg interface{}) {
	l.log(l.stackDepth, Level_Critical, nil, msg)
}

// Criticalf writes a formatted string using the arguments provided to the log.
func (l *logger) Criticalf(msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Critical, nil, fmt.Sprintf(msg, args...))
}

// CriticalEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) CriticalEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Critical, keys, fmt.Sprintf(msg, args...))
}

// Fatal writes the provided string to the log.
func (l *logger) Fatal(msg interface{}) {
	l.log(l.stackDepth, Level_Fatal, nil, msg)
}

// Fatalf writes a formatted string using the arguments provided to the log.
func (l *logger) Fatalf(msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Fatal, nil, fmt.Sprintf(msg, args...))
}

// FatalEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func (l *logger) FatalEx(keys Keys, msg string, args ...interface{}) {
	l.log(l.stackDepth, Level_Fatal, keys, fmt.Sprintf(msg, args...))
}

// Trace writes the provided string to the log.
func Trace(msg interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Trace, nil, msg)
}

// Tracef writes a formatted string using the arguments provided to the log.
func Tracef(msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Trace, nil, fmt.Sprintf(msg, args...))
}

// TraceEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func TraceEx(keys Keys, msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Trace, keys, fmt.Sprintf(msg, args...))
}

// Verbose writes the provided string to the log.
func Verbose(msg interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Verbose, nil, msg)
}

// Verbosef writes a formatted string using the arguments provided to the log.
func Verbosef(msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Verbose, nil, fmt.Sprintf(msg, args...))
}

// VerboseEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func VerboseEx(keys Keys, msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Verbose, keys, fmt.Sprintf(msg, args...))
}

// Debug writes the provided string to the log.
func Debug(msg interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Debug, nil, msg)
}

// Debugf writes a formatted string using the arguments provided to the log.
func Debugf(msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Debug, nil, fmt.Sprintf(msg, args...))
}

// DebugEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func DebugEx(keys Keys, msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Debug, keys, fmt.Sprintf(msg, args...))
}

// Info writes the provided string to the log.
func Info(msg interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Info, nil, msg)
}

// Infof writes a formatted string using the arguments provided to the log.
func Infof(msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Info, nil, fmt.Sprintf(msg, args...))
}

// InfoEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func InfoEx(keys Keys, msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Info, keys, fmt.Sprintf(msg, args...))
}

// Warning writes the provided string to the log.
func Warning(msg interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Warning, nil, msg)
}

// Warningf writes a formatted string using the arguments provided to the log.
func Warningf(msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Warning, nil, fmt.Sprintf(msg, args...))
}

// WarningEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func WarningEx(keys Keys, msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Warning, keys, fmt.Sprintf(msg, args...))
}

// Error writes the provided string to the log.
func Error(msg interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Error, nil, msg)
}

// Errorf writes a formatted string using the arguments provided to the log.
func Errorf(msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Error, nil, fmt.Sprintf(msg, args...))
}

// ErrorEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func ErrorEx(keys Keys, msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Error, keys, fmt.Sprintf(msg, args...))
}

// Critical writes the provided string to the log.
func Critical(msg interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Critical, nil, msg)
}

// Criticalf writes a formatted string using the arguments provided to the log.
func Criticalf(msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Critical, nil, fmt.Sprintf(msg, args...))
}

// CriticalEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func CriticalEx(keys Keys, msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Critical, keys, fmt.Sprintf(msg, args...))
}

// Fatal writes the provided string to the log.
func Fatal(msg interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Fatal, nil, msg)
}

// Fatalf writes a formatted string using the arguments provided to the log.
func Fatalf(msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Fatal, nil, fmt.Sprintf(msg, args...))
}

// FatalEx writes a formatted string using the arguments provided to the log
// but also will prefix the log message with they keys provided to help print
// runtime variables.
func FatalEx(keys Keys, msg string, args ...interface{}) {
	defaultLogger.log(defaultLogger.stackDepth, Level_Fatal, keys, fmt.Sprintf(msg, args...))
}
