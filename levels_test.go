// Code generated by gen/gen.go - DO NOT EDIT.
// This code can be regenerated by running the go generate below.
//go:generate make generated

package timber

import (
	"testing"
)

func TestTrace(t *testing.T) {
	Trace("test")
}

func TestTracef(t *testing.T) {
	Tracef("test %s", "format")
}

func TestTraceEx(t *testing.T) {
	TraceEx(map[string]interface{}{
		"thing": "stuff",
	}, "test")
}

func TestVerbose(t *testing.T) {
	Verbose("test")
}

func TestVerbosef(t *testing.T) {
	Verbosef("test %s", "format")
}

func TestVerboseEx(t *testing.T) {
	VerboseEx(map[string]interface{}{
		"thing": "stuff",
	}, "test")
}

func TestDebug(t *testing.T) {
	Debug("test")
}

func TestDebugf(t *testing.T) {
	Debugf("test %s", "format")
}

func TestDebugEx(t *testing.T) {
	DebugEx(map[string]interface{}{
		"thing": "stuff",
	}, "test")
}

func TestInfo(t *testing.T) {
	Info("test")
}

func TestInfof(t *testing.T) {
	Infof("test %s", "format")
}

func TestInfoEx(t *testing.T) {
	InfoEx(map[string]interface{}{
		"thing": "stuff",
	}, "test")
}

func TestWarning(t *testing.T) {
	Warning("test")
}

func TestWarningf(t *testing.T) {
	Warningf("test %s", "format")
}

func TestWarningEx(t *testing.T) {
	WarningEx(map[string]interface{}{
		"thing": "stuff",
	}, "test")
}

func TestError(t *testing.T) {
	Error("test")
}

func TestErrorf(t *testing.T) {
	Errorf("test %s", "format")
}

func TestErrorEx(t *testing.T) {
	ErrorEx(map[string]interface{}{
		"thing": "stuff",
	}, "test")
}

func TestCritical(t *testing.T) {
	Critical("test")
}

func TestCriticalf(t *testing.T) {
	Criticalf("test %s", "format")
}

func TestCriticalEx(t *testing.T) {
	CriticalEx(map[string]interface{}{
		"thing": "stuff",
	}, "test")
}

func TestFatal(t *testing.T) {
	Fatal("test")
}

func TestFatalf(t *testing.T) {
	Fatalf("test %s", "format")
}

func TestFatalEx(t *testing.T) {
	FatalEx(map[string]interface{}{
		"thing": "stuff",
	}, "test")
}
